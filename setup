#!/bin/bash

progress() {
    echo -e "$(tput bold)\n$1$(tput sgr0)"
}

expenv() {
    if [ "$1" == "--append" ]; then
        echo "export" $2"=\${"$2":+\${"$2"}:}"$3 >> ~/.bashrc
    else
        echo "export" $1"="$2 >> ~/.bashrc
    fi
}

print_usage() {
    echo "usage: setup [instance|manager]"
    exit
}

install_tensorflow() {
    # reference: https://www.tensorflow.org/install/install_linux
    progress "Install Tensorflow (Only for using tensorboard)"

    sudo apt-get install -y python3-pip python3-dev
    sudo pip3 install --upgrade pip
    sudo pip3 install tensorflow
}

install_nfs_client() {
    # reference: https://docs.aws.amazon.com/efs/latest/ug
    progress "Install NFS Client"

    sudo apt-get -y install nfs-common
}

install_golang() {
    # reference: https://github.com/golang/go/wiki/Ubuntu)
    progress "Install Golang 1.9"

    sudo add-apt-repository -y ppa:gophers/archive
    sudo apt-get update
    sudo apt-get install -y golang-1.9-go

    mkdir ~/.go

    expenv --append "PATH" "/usr/lib/go-1.9/bin"
    expenv "GOPATH" "\$HOME/.go"

    /usr/lib/go-1.9/bin/go version
}

install_cuda() {
    # reference: https://developer.nvidia.com/cuda-downloads
    progress "Install CUDA 9.1"

    url=http://developer.download.nvidia.com
    repo=${url}/compute/cuda/repos/ubuntu1604/x86_64
    deb=cuda-repo-ubuntu1604_9.1.85-1_amd64.deb

    wget ${repo}/${deb}
    sudo dpkg -i ${deb}
    sudo apt-key adv --fetch-keys ${repo}/7fa2af80.pub
    sudo apt-get update
    sudo apt-get install -y cuda
    rm ${deb}*

    expenv --append "PATH" "/usr/local/cuda/bin"
    expenv --append "LD_LIBRARY_PATH" "/usr/local/cuda/lib64"

    nvidia-smi
}

install_docker() {
    # reference: https://docs.docker.com/install/linux/docker-ce/ubuntu
    progress "Install Docker CE"

    sudo apt-get install -y \
        apt-transport-https \
        ca-certificates \
        curl \
        software-properties-common
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
    sudo add-apt-repository \
        "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
        $(lsb_release -cs) \
        stable"
    sudo apt-get update
    sudo apt-get install -y docker-ce
    sudo usermod -aG docker $USER

    expenv "DOCKER_API_VERSION" "1.35"

    sudo docker version
}

install_nvidia_docker() {
    # reference: https://github.com/nvidia/nvidia-docker/wiki
    progress "Install NVIDIA Docker 2.0"

    url=https://nvidia.github.io/nvidia-docker

    curl -s -L ${url}/gpgkey | sudo apt-key add -
    curl -s -L ${url}/ubuntu16.04/amd64/nvidia-docker.list | \
        sudo tee /etc/apt/sources.list.d/nvidia-docker.list
    sudo apt-get update
    sudo apt-get install -y nvidia-docker2
    sudo pkill -SIGHUP dockerd
}

mount_efs() {
    mkdir $1

    o="nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,_netdev"
    echo "$2:/	$1	nfs4	$o	0 0" | sudo tee -a /etc/fstab > /dev/null
}

cd $(dirname "$0")

if [ $# -lt 1 ]; then
    print_usage
elif [ "$1" != "manager" ] && [ "$1" != "instance" ]; then
    echo "error: $1 is not available setup type"
    print_usage
elif [ "$(grep -IGnr "YOUR[_A-Z]\+" $1 setup)" != "" ]; then
    progress "Please fill up belows before running this script"
    grep -IGnr "YOUR[_A-Z]\+"
    exit
fi
set -e

setup_as=$1
homepath=/home/ubuntu
efs_mount_point=${homepath}/efs
efs_dns_name="YOUR_EFS_DNS_NAME"

expenv "HOMEPATH" "${homepath}/"

cd ${setup_as}

# Install prerequisites
progress "Install Prerequisites"

sudo apt-get update
sudo apt-get install -y linux-headers-$(uname -r)
sudo apt-get install -y gcc

# Install tools
if [ "$setup_as" == "manager" ]; then
    install_nfs_client
    install_golang

    progress "Setup ${setup_as} in ${homepath}"

    mkdir ${homepath}/script

    mount_efs ${efs_mount_point} ${efs_dns_name}

    export PATH=${PATH:+${PATH}:}/usr/lib/go-1.9/bin
    export GOPATH=$HOME/.go

    go get github.com/aws/aws-sdk-go
    go build -o ${homepath}/manage manage.go
    cp userdata_template upload.html ${homepath}/script
else
    install_tensorflow
    install_nfs_client
    install_golang
    install_cuda
    install_docker
    install_nvidia_docker

    progress "Setup ${setup_as} in ${homepath}"

    mkdir ${homepath}/src

    mount_efs ${efs_mount_point} ${efs_dns_name}

    export PATH=${PATH:+${PATH}:}/usr/lib/go-1.9/bin
    export GOPATH=$HOME/.go

    go get github.com/docker/docker/client
    go build -o ${homepath}/runcontainer runcontainer.go
    cp save_model.py tester.py start ${homepath}/src

    cd ./dockerfile
    sudo docker build -t tensorflow -f tensorflow.Dockerfile .
    sudo docker images
fi

progress "Reboot to finish setup."
